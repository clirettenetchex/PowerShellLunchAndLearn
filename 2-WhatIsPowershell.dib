#!markdown

# What is PowerShell?
<hr />

#!markdown

PowerShell is a scripting language that can be used to automate all kinds of things!

- File system stuff
- Interactions with APIs
- Tedious workflows

#!markdown

<div style="margin-top: 600px;"></div>

#!markdown

*I can run powershell in this file, called a [notebook](https://andrewlock.net/exploring-dotnet-interactive-notebooks/)*

#!pwsh

Write-Host 'Hello World'

#!markdown

<div style="margin-top: 600px;"></div>

#!markdown

### PowerShell follows a `verb-noun` format ([link](https://docs.microsoft.com/en-us/powershell/scripting/developer/cmdlet/approved-verbs-for-windows-powershell-commands?view=powershell-7.2)).

![Verb Noun](./images/VerbNoun.png)

#!pwsh

Get-Command -TotalCount 10

#!markdown

Typically you'll write and run PowerShell in an interactive shell or text editor 

#!markdown

![Interactive Shell](./images/InteractiveShell.png)

#!markdown

### Variables

#!markdown

Variables syntax is $variableName

#!pwsh

$greeting = "Hello World"
Write-Host $greeting

#!markdown

You can assign tons of stuff to variables!

#!pwsh

$commands = Get-Command
$commands.Count

#!pwsh

Start-Process notepad

#!pwsh

$notepadProcess = Start-Process notepad -PassThru   # PassThru parameter makes Start-Process return a process object that we can work with

# display info about this process object
$notepadProcess

# just so we can see the notepad window
Start-Sleep -Seconds 2

Stop-Process $notePadProcess

#!markdown

### Operators

#!markdown

**Comparison Operators**

#!pwsh

# equal to
1 -eq 1
1 -eq 2

# not equal to
1 -ne 2

# greater than
5 -gt 1

# greater than or equal to
5 -ge 5

# less than
5 -lt 10

# less than or equal to
5 -le 5

#!pwsh

# match using the wildcard character (*)
"MyString" -like "*String"

# does not match using the wildcard character
"MyString" -notlike "Other*"

# matches a string using regular expressions
"MyString" -match "$String^"

# does not match a string using regular expressions
"MyString" -notmatch "Other^"

# Changes the specified elements of a value
"Get-Process" -replace "Get", "Stop"

#!pwsh

# returns true when the value (right) is present in the array (left)
"abc", "def" -contains "def"

# returns true when the value (right) is *not* present in the array (left)
"abc", "def" -notcontains "123"

# returns true when the value (left) is present in the array (right)
"def" -in "abc", "def"

# returns true when the value (left) is *not* present in the array (right)
"123" -notin "abc", "def"

#!markdown

**Logical Operators**

#!pwsh

$true -and $true
$true -or $false
-not $false
!$false

#!markdown

**Redirection Operators**

#!pwsh

# send success output to file (overwrite)
# cmdlet > file
Write-Output "You won't see this" > file.txt
Write-Output "Hello World" > file.txt

# send success output to file (append)
Write-Output "Added to the end" >> file.txt

# so many more redirection operators!

#!markdown

### Pipelines

#!markdown

You can "pipe" the output of one command or variable as input into another command! ü§Ø

#!pwsh

Get-Command | Measure-Object

#!pwsh

1..5 | ForEach-Object { Write-Host $_ }

#!pwsh

1..5 | ForEach-Object { $_ * 2 } | Where-Object { $_ -gt 5 }

#!markdown

### Objects

#!pwsh

# Hashtable
$hashTable = @{ a = 1; b = 2 }
$hashTable

#!pwsh

# PSObject
$psObject = [psobject]@{ a = 1; b = 2 }
$psObject

#!pwsh

# PSCustomObject
$psCustomObject = [pscustomobject]@{ a = 1; b = 2 }
$psCustomObject

#!markdown

PowerShell works with .NET types!

#!pwsh

# Instance Members

# methods: $objectReference.MethodName(parameter list)
$greeting = "Hello there!"
$greeting.ToUpper()
$greeting.EndsWith("!")
$greeting.Split(" ")

# properties: $objectReference.PropertyName
$greeting.Length
$greeting[0]

#!pwsh

# Static Members

# methods: [ClassName]::MethodName(parameter list)
[Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes(":some api token")) # Thanks Jeremy for this one! üëç

# properties: [ClassName]::PropertyName
[System.DateTime]::Now
[Math]::PI
